@inject TelementryConfiguration telementryConfig
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - IdentityManagement</title>
    <link href="https://cdn.jsdelivr.net/npm/@@mdi/font@3.x/css/materialdesignicons.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css" />
    <environment exclude="Production">
        <link rel="preload" as="script" href="~/dev/app/app.js" asp-append-version="true">
    </environment>
    <environment include="Production">
        <link rel="preload" as="style" href="~/dist/css/site.min.css" asp-append-version="true" />
        <link rel="preload" as="script" href="~/dist/app/app.min.js" asp-append-version="true">
        <link rel="preload" as="script" href="~/dist/app/js/chunk-vendors.js" asp-append-version="true">
    </environment>
    <script type="text/javascript">
        const instrumentationKey = "@telementryConfig.TelemetryKey";
        var sdkInstance = "appInsightsSDK"; window[sdkInstance] = "appInsights";
        var aiName = window[sdkInstance], aisdk = window[aiName] || function (e) {
            function n(e) { t[e] = function () { var n = arguments; t.queue.push(function () { t[e].apply(t, n) }) } } var t = { config: e }; t.initialize = !0; var i = document, a = window; setTimeout(function () { var n = i.createElement("script"); n.src = e.url || "https://az416426.vo.msecnd.net/scripts/b/ai.2.min.js", i.getElementsByTagName("script")[0].parentNode.appendChild(n) }); try { t.cookie = i.cookie } catch (e) { } t.queue = [], t.version = 2; for (var r = ["Event", "PageView", "Exception", "Trace", "DependencyData", "Metric", "PageViewPerformance"]; r.length;)n("track" + r.pop()); n("startTrackPage"), n("stopTrackPage"); var s = "Track" + r[0]; if (n("start" + s), n("stop" + s), n("setAuthenticatedUserContext"), n("clearAuthenticatedUserContext"), n("flush"), !(!0 === e.disableExceptionTracking || e.extensionConfig && e.extensionConfig.ApplicationInsightsAnalytics && !0 === e.extensionConfig.ApplicationInsightsAnalytics.disableExceptionTracking)) { n("_" + (r = "onerror")); var o = a[r]; a[r] = function (e, n, i, a, s) { var c = o && o(e, n, i, a, s); return !0 !== c && t["_" + r]({ message: e, url: n, lineNumber: i, columnNumber: a, error: s }), c }, e.autoExceptionInstrumented = !0 } return t
        }({ instrumentationKey: instrumentationKey }); window[aiName] = aisdk, aisdk.queue && 0 === aisdk.queue.length && aisdk.trackPageView({});
    </script>
</head>
<body>
    @RenderBody()
    <script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
    <environment exclude="Production">
        <script src="https://unpkg.com/vue"></script>
        <script src="~/dev/app/app.js" asp-append-version="true"></script>
    </environment>
    <environment include="Production">
        <script src="https://unpkg.com/vue@2.6.11/dist/vue.min.js"></script>
        <script src="~/dist/app/js/chunk-vendors.js" asp-append-version="true"></script>
        <script src="~/dist/app/app.min.js" asp-append-version="true"></script>
    </environment>
    @RenderSection("Scripts", required: false)
</body>
</html>